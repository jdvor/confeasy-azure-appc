name: 'Tests'

on:
#  push:
#    branches: ['master']
#    paths-ignore: ['**.md', '**.sh', '.editorconfig', '.gitignore', '.gitattributes', '.pre-commit-config.yaml']
#  pull_request:
#    branches: ['master']
#    paths-ignore: ['**.md', '**.sh', '.editorconfig', '.gitignore', '.gitattributes', '.pre-commit-config.yaml']
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Select the environment to run integration tests'
        options:
          - 'dev'
          - 'stage'
          - 'prod'
        default: 'dev'
        required: true

    secrets:
      DATAVERSE_CLIENT_CONFIG:
        required: true

jobs:
  tests:
    name: 'Run Tests'

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.12" ]  # [ "3.10", "3.11", "3.12" ]
        poetry-version: [ "1.8.4" ]
        os: [ ubuntu-22.04 ]  # [ ubuntu-22.04, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 0 => all history for all branches and tags
          submodules: true

      - name: Install jq
        run: sudo apt install jq -y

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Define a cache for the virtual environment based on the dependencies from lock file
        id: cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install project dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install the project
        run: poetry install --no-interaction

      - name: Check code codestyle
        run: poetry run poe style

      - name: Check type hints
        run: poetry run poe type

      - name: Check docstring conventions
        run: poetry run poe docstyle

      - name: Create .env file for integration tests
        run: ./ci_prepare_env_for_tests.sh -e "${{ inputs.environment }}" -s "${{ secrets.DATAVERSE_CLIENT_CONFIG }}"

      - name: Run tests
        run: poetry run poe citest

      - name: Show test report
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: test-report-junit.xml
          summary: true
          display-options: fEX  # results included in the report; follows the same syntax as `pytest -r`
          fail-on-empty: true
          title: Test results

